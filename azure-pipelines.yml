# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


pool:
  name: Default

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

- task: AzureCLI@2
  inputs:
    azureSubscription: 'Visual Studio Enterprise Subscription(5a3ddded-402a-459a-a9b2-1c1e14fa9314)'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      $ScanCompleted = "Complete"
      $ScanStopped = "ScanStopped"
      $ScanInterrupted = "Interrupted"
      $ScanPending = "Pending"
      $ScanQueued = "Queued"
      $ScanForcedComplete = "ForcedComplete"
      $wiAPIurl = '192.168.213.150:5001'
      
      $headers = @{"Authorization" = "FORTIFYTOKEN N2MyMTVlYTgtOWNiYi00YzI4LTlhN2QtMWYxMTI4ZTgxYTAy"}
      
      $responseurl = 'http://' + $wiAPIurl + '/api/v2/scans/start-scan-cicd'
       $body = '{
      "cicdToken": "2f4d2acb-ef12-4439-8c6c-a87d9117f5a3",
      "scannerId": 0,
      "useAssignedScannerOnly": true,
      
      
      }'
      
      
      #start scan using the start-scan-cicd method
      $response = Invoke-RestMethod  -Method POST -HEADERS $headers -ContentType "application/json" -Body $body -uri $responseurl
      $scanid = $response.id
      $StatusUrl = 'http://' + $wiAPIurl + '/api/v2/scans/' + $scanId + '/scan-summary?includeSuppressedFindings=false'
      
      
      do{
          $status = Invoke-RestMethod  -Method GET -ContentType "application/json" -Headers $headers -uri "$StatusUrl"
          $ScanDate =  $status[$status.Length-1].Date
          $ScanMessage = $status[$status.Length-1].Message
          $ScanStatus =  $status.item.scanStatusTypeDescription
          Write-Host ($ScanDate, $ScanMessage, $ScanStatus) -Separator " - "
      }
      while (($ScanStatus -ne $ScanForcedComplete) -and ($ScanStatus -ne $ScanCompleted) -and ($ScanStatus -ne $ScanStopped) -and ($ScanStatus -ne $ScanInterrupted))
      $critCount = $status.item.criticalCount
      $highCount = $status.item.highCount
      $mediumCount = $status.item.mediumCount
      $lowCount = $status.item.lowCount

      Write-Host "critical count = " $critCount 
      Write-Host "high count = " $highCount 
      Write-Host "medium count = " $mediumCount 
      Write-Host "low count = " $lowCount 

      $findingsendpoint = 'http://' + $wiAPIurl + '/api/v2/scans/' + $scanid + '/findings'
      $headers2 = $headers + @{"accept" = "text/plain"}
      write-host $findingsendpoint
      $findings = Invoke-RestMethod  -Method GET -ContentType "application/json" -Headers $headers2  -uri $findingsendpoint
      # Convert JSON to PowerShell object
      #$data = $findings | ConvertFrom-Json
      write-host ("sleep for 15 seconds")
      Start-Sleep -Seconds 15

      write-host ("Entire response:")
      write-host $findings.items.checkClassificationName

      #$data = $findings | ConvertFrom-Json
      # Extract checkClassificationName into an array
      #$classificationArray = $data.items | Select-Object -ExpandProperty checkClassificationName

      # Output the array
      #write-host ("list of vulnerabilities:")
      #$classificationArray

      ${env:SCANID2} = $scanid
      write-host ${env:SCANID2}

      #to do: query scan result for pass/failure
      if ($status.item.criticalCount -gt 3)
      {
      write-host ("critical vulnerbilities found")
      exit 1
      }

- task: AzureCLI@2
  inputs:
    azureSubscription: 'Visual Studio Enterprise Subscription(5a3ddded-402a-459a-a9b2-1c1e14fa9314)'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      $wiAPIurl = '192.168.213.150:5001'
      $scanId2 = ${env:SCANID2}
      $headers = @{"Authorization" = "FORTIFYTOKEN NTRiNzQ0YzYtZjU5Yi00MjY1LTlmYzktZTE4NzExNmU1Zjg4"} +  @{"accept" = "text/plain"}
      $headers2 = @{"accept" = "text/plain"}
      $findingsendpoint = 'http://' + $wiAPIurl + '/api/v2/scans/' + $scanId2 + '/findings'
      write-host ("findings URL")
      write-host $findingsendpoint
      $findings = Invoke-RestMethod  -Method GET -ContentType "application/json" -Headers $headers  -uri $findingsendpoint
      # Convert JSON to PowerShell object
      #$data = $findings | ConvertFrom-Json
      write-host $findings
      write-host ("Entire response:")
      write-host $findings.items.checkClassificationName