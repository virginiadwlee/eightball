# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:

  name: Azure Pipelines

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'
#- task: PowerShell@2
#  inputs:
#    filePath: 'c:\scan_result\azuredevopscicdscdast.ps1'

- task: AzureCLI@2
  inputs:
    azureSubscription: 'Visual Studio Enterprise Subscription(1)(5a3ddded-402a-459a-a9b2-1c1e14fa9314)'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      $ScanCompleted = "Complete"
      $ScanStopped = "ScanStopped"
      $ScanInterrupted = "Interrupted"
      $ScanPending = "Pending"
      $ScanQueued = "Queued"
      $wiAPIurl = '192.168.213.150:5001'
      
      $headers = @{"Authorization" = "FORTIFYTOKEN MzY0NjE3YjctYzFiZC00MTBjLTk1OWQtNWFhOTM0NDE0Y2Q2"}
      
      $responseurl = 'http://' + $wiAPIurl + '/api/v2/scans/start-scan-cicd'
       $body = '{
      "cicdToken": "abd8a0d8-5510-427f-a3da-69a22320c3de",
      "scannerId": 0,
      "useAssignedScannerOnly": true,
      
      
      }'
      
      
      #start scan using the start-scan-cicd method
      $response = Invoke-RestMethod  -Method POST -HEADERS $headers -ContentType "application/json" -Body $body -uri $responseurl
      $scanid = $response.id
      $StatusUrl = 'http://' + $wiAPIurl + '/api/v2/scans/' + $scanId + '/scan-summary?includeSuppressedFindings=false'
      
      
      do{
          $status = Invoke-RestMethod  -Method GET -ContentType "application/json" -Headers $headers -uri "$StatusUrl"
          $ScanDate =  $status[$status.Length-1].Date
          $ScanMessage = $status[$status.Length-1].Message
          $ScanStatus =  $status.item.scanStatusTypeDescription
          Write-Host ($ScanDate, $ScanMessage, $ScanStatus) -Separator " - "
      }
      while (($ScanStatus -ne $ScanCompleted) -and ($ScanStatus -ne $ScanStopped) -and ($ScanStatus -ne $ScanInterrupted))
      $critCount = $status.item.criticalCount
      Write-Host "crit count = " $critCount 
      
      #to do: query scan result for pass/failure
      if ($status.item.criticalCount -gt 3)
      {
      write-host ("critical vulnerbilities found")
      exit 1
      }
    powerShellErrorActionPreference: 'continue'
